
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.50+56 (git sha1 9106d6b3b, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: substructor_formal.v
Parsing formal SystemVerilog input from `substructor_formal.v' to AST representation.
Storing AST representation for module `$abstract\substructor'.
Storing AST representation for module `$abstract\substructor_formal'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\substructor_formal'.
Generating RTLIL representation for module `\substructor_formal'.

2.2.1. Analyzing design hierarchy..
Top module:  \substructor_formal

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\substructor'.
Generating RTLIL representation for module `\substructor'.

2.2.3. Analyzing design hierarchy..
Top module:  \substructor_formal
Used module:     \substructor

2.2.4. Analyzing design hierarchy..
Top module:  \substructor_formal
Used module:     \substructor
Removing unused module `$abstract\substructor_formal'.
Removing unused module `$abstract\substructor'.
Removed 2 unused modules.
Module substructor_formal directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\substructor_formal.$proc$substructor_formal.v:20$1'.

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `substructor_formal.$proc$substructor_formal.v:20$1'.
Cleaned up 0 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module substructor.
Optimizing module substructor_formal.

2.4. Executing FUTURE pass.

2.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module substructor.
Optimizing module substructor_formal.

2.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \substructor..
Finding unused cells or wires in module \substructor_formal..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.7. Executing CHECK pass (checking for obvious problems).
Checking module substructor...
Checking module substructor_formal...
Found and reported 0 problems.

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module substructor.
Optimizing module substructor_formal.

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\substructor'.
Finding identical cells in module `\substructor_formal'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \substructor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \substructor_formal..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \substructor.
  Optimizing cells in module \substructor_formal.
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\substructor'.
Finding identical cells in module `\substructor_formal'.
Removed a total of 0 cells.

2.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \substructor..
Finding unused cells or wires in module \substructor_formal..

2.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module substructor.
Optimizing module substructor_formal.

2.8.8. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell substructor.$add$substructor.v:16$8 ($add).
Removed top 48 bits (of 64) from port B of cell substructor_formal.$eq$substructor_formal.v:22$6 ($eq).

2.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \substructor..
Finding unused cells or wires in module \substructor_formal..

2.11. Executing MEMORY_COLLECT pass (generating $mem cells).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module substructor.
Optimizing module substructor_formal.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\substructor'.
Finding identical cells in module `\substructor_formal'.
Removed a total of 0 cells.

2.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \substructor..
Finding unused cells or wires in module \substructor_formal..

2.12.4. Finished fast OPT passes.

2.13. Printing statistics.

=== substructor ===

   Number of wires:                  5
   Number of wire bits:            320
   Number of public wires:           3
   Number of public wire bits:     192
   Number of ports:                  3
   Number of port bits:            192
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $add                            2
     $not                            1

=== substructor_formal ===

   Number of wires:                  6
   Number of wire bits:            258
   Number of public wires:           3
   Number of public wire bits:     192
   Number of ports:                  3
   Number of port bits:            192
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $check                          2
     $eq                             2
     $sub                            1
     substructor                     1

=== design hierarchy ===

   substructor_formal                1
     substructor                     1

   Number of wires:                 11
   Number of wire bits:            578
   Number of public wires:           6
   Number of public wire bits:     384
   Number of ports:                  6
   Number of port bits:            384
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $check                          2
     $eq                             2
     $not                            1
     $sub                            1

2.14. Executing CHECK pass (checking for obvious problems).
Checking module substructor...
Checking module substructor_formal...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `substructor_formal'. Setting top module to substructor_formal.

3.1. Analyzing design hierarchy..
Top module:  \substructor_formal
Used module:     \substructor

3.2. Analyzing design hierarchy..
Top module:  \substructor_formal
Used module:     \substructor
Removed 0 unused modules.
Module substructor_formal directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

End of script. Logfile hash: 4bf84a8cb3, CPU: user 0.03s system 0.01s, MEM: 18.25 MB peak
Yosys 0.50+56 (git sha1 9106d6b3b, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 28% 4x opt_clean (0 sec), 25% 5x opt_expr (0 sec), ...
